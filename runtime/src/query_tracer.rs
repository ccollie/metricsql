// Tracer represents query tracer.
//
// It must be created via New call.
// Each created tracer must be finalized via Done or Donef call.
//
// Tracer may contain sub-tracers (branches) in order to build tree-like execution order.
// Call Tracer.NewChild func for adding sub-tracer.
pub struct QueryTracer {
    // start_time is the time when Tracer was created
    start_time: time.Time
    // done_time is the time when Done or Donef was called
    done_time: time.Time
    // message is the message generated by NewChild, Printf or Donef call.
    message: String,
    // children is a list of children Tracer objects
    children: Vec<Box<QueryTracer>>,
    // span contains span for the given Tracer. It is added via Tracer.AddSpan().
    // If span is non-nil, then the remaining fields aren't used.
    span *span
}

impl QueryTracer {
    pub fn enabled(&self) -> bool {
        return false
    }

    pub fn new_child(&self, log: String) {

    }
}